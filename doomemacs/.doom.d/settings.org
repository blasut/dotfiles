#+TITLE: Settings
#+PROPERTY: header-args    :results silent

* Inspiration

https://github.com/tecosaur/emacs-config

https://github.com/angrybacon/dotemacs/blob/master/dotemacs.org

* Defaults and simple binding

Let's use lexical bindings
#+begin_src emacs-lisp
;;; settings.el -*- lexical-binding: t; -*-
#+end_src

Allow me to mash the keys in any order yes good
#+BEGIN_SRC emacs-lisp
(setq evil-escape-unordered-key-sequence t)
#+END_SRC

** show path in buffer title
  #+BEGIN_SRC emacs-lisp
(setq frame-title-format
      '((:eval (if (buffer-file-name)
                   (abbreviate-file-name (buffer-file-name))
                 "%b"))))
  #+END_SRC

** delete by moving to trash

#+begin_src emacs-lisp
(setq-default
 delete-by-moving-to-trash t)
#+end_src

** some basic keybindings

Always search with swiper
#+begin_src emacs-lisp
(map! :n "/" #'swiper-isearch)
#+end_src

#+begin_src emacs-lisp
(map! :leader "." #'+ivy/projectile-find-file)
#+end_src

Remap SPC SPC to M-x like spacemacs
#+begin_src emacs-lisp
(map! :leader
        "SPC" #'counsel-M-x
        )
#+end_src

Use smartparens kill, works really well (most of the time)
#+begin_src emacs-lisp
(map!
 :g "C-k" 'sp-kill-hybrid-sexp
 :g "M-k" 'sp-backward-kill-sexp
 )
#+end_src

Use backslash as the local leader key
#+begin_src emacs-lisp
(setq ;doom-leader-key ","
 doom-localleader-key "\\")
#+end_src

* Doom settings

Some functionality uses this to identify you, e.g. GPG configuration, email
clients, file templates and snippets.
#+begin_src emacs-lisp
(setq user-full-name "John Doe"
      user-mail-address "john@doe.com")
#+end_src

** doom fonts

Doom exposes five (optional) variables for controlling fonts in Doom. Here
are the three important ones:

+ `doom-font'
+ `doom-variable-pitch-font'
+ `doom-big-font' -- used for `doom-big-font-mode'; use this for
  presentations or streaming.

They all accept either a font-spec, font string ("Input Mono-12"), or xlfd
font string. You generally only need these two:

#+begin_src emacs-lisp
(setq doom-font (font-spec :family "Fira Mono" :size 16))
#+end_src

** doom theme

There are two ways to load a theme. Both assume the theme is installed and
available. You can either set `doom-theme' or manually load a theme with the
`load-theme' function. This is the default:
#+begin_src emacs-lisp
(setq doom-theme 'doom-palenight)
#+end_src

** compare init file with the example

#+begin_src emacs-lisp
(defun blasut/compare-init ()
  "Compares the init.example.el file with the current init.el"
  (interactive)
  (ediff "~/dotfiles/doomemacs/.doom.d/init.el" "~/dotfiles/doomemacs/.emacs.d/init.example.el"))
#+end_src

* Org

Some keybindings and keyword settings

Why doesn't localleader work in org mode by default?
#+begin_src emacs-lisp
(after! org
  (map! :map org-mode-map
        :localleader
        ;; My own overwrites
        ;;"N" #'org-store-link
        ;; "n" #'org-narrow-to-subtree
        ;; "w" #'widen

        ;; Copied from lang/org/config.el
        "#" #'org-update-statistics-cookies
        "'" #'org-edit-special
        "*" #'org-ctrl-c-star
        "+" #'org-ctrl-c-minus
        "," #'org-switchb
        "." #'org-goto
        (:when (featurep! :completion ivy)
         "." #'counsel-org-goto
         "/" #'counsel-org-goto-all)
        (:when (featurep! :completion helm)
         "." #'helm-org-in-buffer-headings
         "/" #'helm-org-agenda-files-headings)
        (:when (featurep! :completion vertico)
         "." #'consult-org-heading
         "/" #'consult-org-agenda)
        "A" #'org-archive-subtree
        "e" #'org-export-dispatch
        "f" #'org-footnote-new
        "h" #'org-toggle-heading
        "i" #'org-toggle-item
        "I" #'org-id-get-create
        "n" #'org-store-link
        "o" #'org-set-property
        "q" #'org-set-tags-command
        "t" #'org-todo
        "T" #'org-todo-list
        "x" #'org-toggle-checkbox
        (:prefix ("a" . "attachments")
         "a" #'org-attach
         "d" #'org-attach-delete-one
         "D" #'org-attach-delete-all
         "f" #'+org/find-file-in-attachments
         "l" #'+org/attach-file-and-insert-link
         "n" #'org-attach-new
         "o" #'org-attach-open
         "O" #'org-attach-open-in-emacs
         "r" #'org-attach-reveal
         "R" #'org-attach-reveal-in-emacs
         "u" #'org-attach-url
         "s" #'org-attach-set-directory
         "S" #'org-attach-sync
         (:when (featurep! +dragndrop)
          "c" #'org-download-screenshot
          "p" #'org-download-clipboard
          "P" #'org-download-yank))
        (:prefix ("b" . "tables")
         "-" #'org-table-insert-hline
         "a" #'org-table-align
         "b" #'org-table-blank-field
         "c" #'org-table-create-or-convert-from-region
         "e" #'org-table-edit-field
         "f" #'org-table-edit-formulas
         "h" #'org-table-field-info
         "s" #'org-table-sort-lines
         "r" #'org-table-recalculate
         "R" #'org-table-recalculate-buffer-tables
         (:prefix ("d" . "delete")
          "c" #'org-table-delete-column
          "r" #'org-table-kill-row)
         (:prefix ("i" . "insert")
          "c" #'org-table-insert-column
          "h" #'org-table-insert-hline
          "r" #'org-table-insert-row
          "H" #'org-table-hline-and-move)
         (:prefix ("t" . "toggle")
          "f" #'org-table-toggle-formula-debugger
          "o" #'org-table-toggle-coordinate-overlays)
         (:when (featurep! +gnuplot)
          "p" #'org-plot/gnuplot))
        (:prefix ("c" . "clock")
         "c" #'org-clock-cancel
         "d" #'org-clock-mark-default-task
         "e" #'org-clock-modify-effort-estimate
         "E" #'org-set-effort
         "g" #'org-clock-goto
         "G" (cmd! (org-clock-goto 'select))
         "l" #'+org/toggle-last-clock
         "i" #'org-clock-in
         "I" #'org-clock-in-last
         "o" #'org-clock-out
         "r" #'org-resolve-clocks
         "R" #'org-clock-report
         "t" #'org-evaluate-time-range
         "=" #'org-clock-timestamps-up
         "-" #'org-clock-timestamps-down)
        (:prefix ("d" . "date/deadline")
         "d" #'org-deadline
         "s" #'org-schedule
         "t" #'org-time-stamp
         "T" #'org-time-stamp-inactive)
        (:prefix ("g" . "goto")
         "g" #'org-goto
         (:when (featurep! :completion ivy)
          "g" #'counsel-org-goto
          "G" #'counsel-org-goto-all)
         (:when (featurep! :completion helm)
          "g" #'helm-org-in-buffer-headings
          "G" #'helm-org-agenda-files-headings)
         (:when (featurep! :completion vertico)
          "g" #'consult-org-heading
          "G" #'consult-org-agenda)
         "c" #'org-clock-goto
         "C" (cmd! (org-clock-goto 'select))
         "i" #'org-id-goto
         "r" #'org-refile-goto-last-stored
         "v" #'+org/goto-visible
         "x" #'org-capture-goto-last-stored)
        (:prefix ("l" . "links")
         "c" #'org-cliplink
         "d" #'+org/remove-link
         "i" #'org-id-store-link
         "l" #'org-insert-link
         "L" #'org-insert-all-links
         "s" #'org-store-link
         "S" #'org-insert-last-stored-link
         "t" #'org-toggle-link-display)
        (:prefix ("P" . "publish")
         "a" #'org-publish-all
         "f" #'org-publish-current-file
         "p" #'org-publish
         "P" #'org-publish-current-project
         "s" #'org-publish-sitemap)
        (:prefix ("r" . "refile")
         "." #'+org/refile-to-current-file
         "c" #'+org/refile-to-running-clock
         "l" #'+org/refile-to-last-location
         "f" #'+org/refile-to-file
         "o" #'+org/refile-to-other-window
         "O" #'+org/refile-to-other-buffer
         "v" #'+org/refile-to-visible
         "r" #'org-refile) ; to all `org-refile-targets'
        (:prefix ("s" . "tree/subtree")
         "a" #'org-toggle-archive-tag
         "b" #'org-tree-to-indirect-buffer
         "d" #'org-cut-subtree
         "h" #'org-promote-subtree
         "j" #'org-move-subtree-down
         "k" #'org-move-subtree-up
         "l" #'org-demote-subtree
         "n" #'org-narrow-to-subtree
         "r" #'org-refile
         "s" #'org-sparse-tree
         "A" #'org-archive-subtree
         "N" #'widen
         "S" #'org-sort)
        (:prefix ("p" . "priority")
         "d" #'org-priority-down
         "p" #'org-priority
         "u" #'org-priority-up)

        )
  (setq org-todo-keywords
        '((sequence "TODO(t!)" "PROJ(p)" "LOOP(r)" "STRT(s)" "WAIT(w/!)" "HOLD(h)" "IDEA(i)" "|" "DONE(d!)" "KILL(k!)")
          (sequence "[ ](T)" "[-](S)" "[?](W)" "|" "[X](D)")
          (sequence "|" "OKAY(o)" "YES(y)" "NO(n)"))
        )

  (setq org-log-into-drawer t)
  )
#+end_src

* Windows

Split in a more sane way
#+begin_src emacs-lisp
(setq evil-vsplit-window-right t
      evil-split-window-below t)
#+end_src

Ask for which already opened buffer to open in the splitted window

This was actually pretty nice, I think.
#+begin_src emacs-lisp
(defadvice! prompt-for-buffer (&rest _)
  :after '(evil-window-split evil-window-vsplit)
  (+ivy/switch-workspace-buffer))
#+end_src

Preview buffers when switching, not 100% I like this though, it feels a bit too much.

This is a bit laggy somtimes... Turning it off for now
#+begin_src emacs-lisp
(setq +ivy-buffer-preview nil)
#+end_src

** Keybindings

Bindings for selecting windows and workspaces

Makes it a bit more like spacemacs

#+begin_src emacs-lisp
(map!
 (:when (featurep! :ui workspaces)
  :n "s-1"   #'winum-select-window-1
  :n "s-2"   #'winum-select-window-2
  :n "s-3"   #'winum-select-window-3
  :n "s-4"   #'winum-select-window-4
  :n "s-5"   #'winum-select-window-5
  :n "s-6"   #'winum-select-window-6
  :n "s-7"   #'winum-select-window-7
  :n "s-8"   #'winum-select-window-7
  :n "s-9"   #'winum-select-window-8

  :g "M-1"   #'+workspace/switch-to-0
  :g "M-2"   #'+workspace/switch-to-1
  :g "M-3"   #'+workspace/switch-to-2
  :g "M-4"   #'+workspace/switch-to-3
  :g "M-5"   #'+workspace/switch-to-4
  :g "M-6"   #'+workspace/switch-to-5
  :g "M-7"   #'+workspace/switch-to-6
  :g "M-8"   #'+workspace/switch-to-7
  :g "M-9"   #'+workspace/switch-to-8
  :g "M-0"   #'+workspace/switch-to-final
  ))
#+end_src

* Presentation configuration

doom already comes with presentation setup :)

#+BEGIN_SRC emacs-lisp :tangle no

(defun blasut/presentation-setup ()
  (doom-big-font-mode)
  (org-display-inline-images))

(defun blasut/presentation-end ()
  (doom-big-font-mode -1))

(use-package org-tree-slide
  :hook ((org-tree-slide-play . blasut/presentation-setup)
         (org-tree-slide-stop . blasut/presentation-end))

  :custom
  (org-tree-slide-activate-message "Presentation started!")
  (org-tree-slide-deactivate-message "Presentation finished!")
  ;; make sure images don't take up too much space
  (org-image-actual-width nil)

  :bind (("<f5>" . org-tree-slide-mode)
         (:map org-tree-slide-mode-map
          ("<mouse-3>" . org-tree-slide-move-previous-tree)
          ("<mouse-4>" . org-tree-slide-move-next-tree)))

  )
#+END_SRC

* TypeScript

TypeScript config

I'm trying to set the ~flycheck-checker~ for typescript modes as a local env, and emacs yells at me...
I'm not sure how to solve this without allowing unsafe dir locals...

NOT USING THIS ATM:

This sucks, so turning it back to the default
#+begin_src emacs-lisp :tangle no
(setq-default enable-local-variables :t)
#+end_src

Maybe I can set it as safe?
#+begin_src emacs-lisp :tangle no
(add-to-list 'safe-local-variable-values '((flycheck-checker . javascript-eslint)))
(put 'flycheck-checker 'safe-local-variable 'stringp)
#+end_src

the .dir.locals conf:
#+begin_src emacs-lisp :tangle no
((typescript-tsx-mode . ((flycheck-checker . javascript-eslint))))
#+end_src


Just use global config, yolo.

Make sure to use prettier for formatting
#+begin_src emacs-lisp

(setq-hook! 'typescript-mode-hook
  +format-with-lsp nil
  flycheck-checker 'javascript-eslint
  )
#+end_src

pls use 2 spaces as tabs
#+begin_src emacs-lisp
(setq typescript-indent-level 2)

;; Don't use built-in syntax checking
(setq js2-mode-show-strict-warnings nil)
#+end_src
