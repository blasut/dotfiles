#+TITLE: Settings
#+PROPERTY: header-args    :results silent

* Inspiration

https://github.com/tecosaur/emacs-config

https://github.com/angrybacon/dotemacs/blob/master/dotemacs.org

* Defaults and simple binding

Let's use lexical bindings
#+begin_src emacs-lisp
;;; settings.el -*- lexical-binding: t; -*-
#+end_src

#+BEGIN_SRC emacs-lisp
;; Allow me to mash the keys in any order yes good
(setq evil-escape-unordered-key-sequence t)
#+END_SRC

** show path in buffer title
  #+BEGIN_SRC emacs-lisp
(setq frame-title-format
      '((:eval (if (buffer-file-name)
                   (abbreviate-file-name (buffer-file-name))
                 "%b"))))
  #+END_SRC

** delete by moving to trash

#+begin_src emacs-lisp
(setq-default
 delete-by-moving-to-trash t)
#+end_src

* Doom settings

Some functionality uses this to identify you, e.g. GPG configuration, email
clients, file templates and snippets.
#+begin_src emacs-lisp
(setq user-full-name "John Doe"
      user-mail-address "john@doe.com")
#+end_src

** doom fonts

Doom exposes five (optional) variables for controlling fonts in Doom. Here
are the three important ones:

+ `doom-font'
+ `doom-variable-pitch-font'
+ `doom-big-font' -- used for `doom-big-font-mode'; use this for
  presentations or streaming.

They all accept either a font-spec, font string ("Input Mono-12"), or xlfd
font string. You generally only need these two:

#+begin_src emacs-lisp
(setq doom-font (font-spec :family "Fira Mono" :size 16))
#+end_src

** doom theme

There are two ways to load a theme. Both assume the theme is installed and
available. You can either set `doom-theme' or manually load a theme with the
`load-theme' function. This is the default:
#+begin_src emacs-lisp
(setq doom-theme 'doom-palenight)
#+end_src

* Windows

Split in a more sane way
#+begin_src emacs-lisp
(setq evil-vsplit-window-right t
      evil-split-window-below t)
#+end_src

Ask for which already opened buffer to open in the splitted window

This was actually pretty nice, I think.
#+begin_src emacs-lisp
(defadvice! prompt-for-buffer (&rest _)
  :after '(evil-window-split evil-window-vsplit)
  (+ivy/switch-buffer))
#+end_src

Preview buffers when switching, not 100% I like this though, it feels a bit too much.
#+begin_src emacs-lisp
(setq +ivy-buffer-preview t)
#+end_src

* Presentation configuration

#+BEGIN_SRC emacs-lisp

(defun blasut/presentation-setup ()
  (doom-big-font-mode)
  (org-display-inline-images))

(defun blasut/presentation-end ()
  (doom-big-font-mode -1))

(use-package org-tree-slide
  :hook ((org-tree-slide-play . blasut/presentation-setup)
         (org-tree-slide-stop . blasut/presentation-end))

  :custom
  (org-tree-slide-activate-message "Presentation started!")
  (org-tree-slide-deactivate-message "Presentation finished!")
  ;; make sure images don't take up too much space
  (org-image-actual-width nil)

  :bind (("<f5>" . org-tree-slide-mode)
         (:map org-tree-slide-mode-map
          ("<mouse-3>" . org-tree-slide-move-previous-tree)
          ("<mouse-4>" . org-tree-slide-move-next-tree)))

  )
#+END_SRC
