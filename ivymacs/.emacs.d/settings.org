* Settings
  Really liking this way of organizing the config files.

  Kind of weird with having the defuns first, should look into that

  This config, ivymacs, takes very heavy inspiration from spacemacs and uses a combination of different packages to achieve that. Because we are using ordinary emacs, we have full controll over the .emacs.d folder which in the spacemacs cause we dont.

  The motivation for this project is twofold, one part is to try the ivy family of packages and the other to try using stock emacs where every package and keybinding is very clear. Sometimes spacemacs feels to big and cluttered.

* How to
  Add ":tangle no" to emacs-lisp begin src block to ignore that config

* Defuns

** open-config
   #+BEGIN_SRC emacs-lisp
   (defun open-config ()
     "Opens the init.el file"
     (interactive)
     (find-file "~/.emacs.d/settings.org"))
   #+END_SRC

** reload-config
   #+BEGIN_SRC emacs-lisp
   (defun reload-config ()
     (interactive)
     (with-temp-buffer
       (insert-file-contents "~/.emacs.d/init.el")
       (eval-buffer))
     (open-config))
   #+END_SRC


* Settings

** utf8
   #+BEGIN_SRC emacs-lisp
   (set-language-environment "utf-8")
   (setq locale-coding-system 'utf-8)
   (set-default-coding-systems 'utf-8)
   (set-terminal-coding-system 'utf-8)
   (set-keyboard-coding-system 'utf-8)
   (set-selection-coding-system 'utf-8)
   (setq buffer-file-coding-system 'utf-8-unix)
   (prefer-coding-system 'utf-8)

   (setenv "LANG" "en_US.UTF-8")
   #+END_SRC

** yes or no dialog
   #+BEGIN_SRC emacs-lisp
   (defadvice y-or-n-p (around prevent-dialog-yorn activate)
     "Prevent y-or-n-p from activating a dialog"
     (let ((use-dialog-box nil))
       ad-do-it))
   (fset 'yes-or-no-p 'y-or-n-p)
   #+END_SRC

** ignore bell
   #+BEGIN_SRC emacs-lisp
   (setq ring-bell-function 'ignore)
   #+END_SRC

** always display line and column numbers
   #+BEGIN_SRC emacs-lisp
   (setq line-number-mode t)
   (setq column-number-mode t)
   #+END_SRC

** lines should be 80 wide
   #+BEGIN_SRC emacs-lisp
   (setq fill-column 80)
   #+END_SRC

** never insert tabs
   #+BEGIN_SRC emacs-lisp
   (set-default 'indent-tabs-mode nil)
   #+END_SRC

** show empty lines
   #+BEGIN_SRC emacs-lisp
   (set-default 'indicate-empty-lines t)
   #+END_SRC

** no double space to end periods
   #+BEGIN_SRC emacs-lisp
   (set-default 'sentence-end-double-space nil)
   #+END_SRC

** Offer to create parent directories if they do not exist
   #+BEGIN_SRC emacs-lisp
   (defun my-create-non-existent-directory ()
     (let ((parent-directory (file-name-directory buffer-file-name)))
       (when (and (not (file-exists-p parent-directory))
                  (y-or-n-p (format "Directory `%s' does not exist! Create it?" parent-directory)))
         (make-directory parent-directory t))))

   (add-to-list 'find-file-not-found-functions 'my-create-non-existent-directory)
   #+END_SRC

** no startup message
   #+BEGIN_SRC emacs-lisp
   (setq inhibit-startup-message t)
   #+END_SRC

** backups and stuff
   #+BEGIN_SRC emacs-lisp
   (setq delete-old-versions -1 )		; delete excess backup versions silently
   (setq version-control t )		; use version control
   (setq vc-make-backup-files t )		; make backups file even when in version controlled dir
   (setq backup-directory-alist `(("." . "~/.backups")) ) ; which directory to put backups file
   (setq vc-follow-symlinks t )				       ; don't ask for confirmation when opening symlinked file
   (setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t)) ) ;transform backups file name
   (setq delete-by-moving-to-trash t)
   #+END_SRC

** enable clipboard
   #+BEGIN_SRC emacs-lisp
   (setq x-select-enable-clipboard t)
   #+END_SRC

** apperences
   #+BEGIN_SRC emacs-lisp
   (when window-system
     (tooltip-mode -1)
     (tool-bar-mode -1)
     (menu-bar-mode -1)
     (scroll-bar-mode -1)
                                           ;(set-frame-font "Inconsolata 16")
     (blink-cursor-mode 1)
     (global-visual-line-mode)
     )
   #+END_SRC

** use another file instead of init.el for customizations
   #+BEGIN_SRC emacs-lisp
   (setq custom-file "~/.emacs.d/customized.el")
   (load custom-file)
   #+END_SRC
** enable recursive minibuffers
   When the minibuffer is active, we can still use call other commands for more minibuffers
   #+BEGIN_SRC emacs-lisp
   (setq enable-recursive-minibuffers t)
   #+END_SRC
** inidicate minibuffer depth
   ESC ESC ESC for closing anything you want
   #+BEGIN_SRC emacs-lisp
   (minibuffer-depth-indicate-mode 1)
   #+END_SRC

** performance
   Set the gc threshold to 10MiB
   #+BEGIN_SRC emacs-lisp
   (setq gc-cons-threshold (* 10 1024 1024))
   #+END_SRC

** more reasonable tab behaviour
   Default Tab is only indention. Now its first indentation then auto complete
   #+BEGIN_SRC emacs-lisp
                                           ;(setq tab-always-indent 'complete)
   #+END_SRC
   I think I want to try using some other binding for autocomplete

** frame title format
   Show the entire path of the file in the title
   #+BEGIN_SRC emacs-lisp
   (setq frame-title-format
         '((:eval (if (buffer-file-name)
                      (abbreviate-file-name (buffer-file-name))
                    "%b"))))
   #+END_SRC

** auto revert buffers when files have changed
   #+BEGIN_SRC emacs-lisp
   (global-auto-revert-mode t)
   #+END_SRC

** font
   #+BEGIN_SRC emacs-lisp
   (set-face-attribute 'default nil :family "JetBrains Mono" :height 160)
   #+END_SRC

   #+RESULTS:


* Org mode
** org-indent-mode
   Enable visual indentation for org headings
   #+BEGIN_SRC emacs-lisp
   (setq org-startup-indented t)  ; Enable indent mode by default
   (add-hook 'org-mode-hook 'org-indent-mode)
   #+END_SRC

** pretty source code blocks
   #+BEGIN_SRC emacs-lisp
   (setq org-edit-src-content-indentation 0
         org-src-tab-acts-natively t
         org-src-fontify-natively t
         org-confirm-babel-evaluate nil
         org-support-shift-select 'always)
   #+END_SRC

** org babel
   List of the languages for org babel
   #+BEGIN_SRC emacs-lisp
   (with-eval-after-load 'org
     (org-babel-do-load-languages
      'org-babel-load-languages
      '((emacs-lisp .t)
        (lisp . t))
      )
     )
   #+END_SRC

** Remove markup chars, /lol/ becomes italized "lol"
   #+BEGIN_SRC emacs-lisp
   (setq org-hide-emphasis-markers t)
   #+END_SRC

** set org directory
   #+BEGIN_SRC emacs-lisp
   (setq org-directory "~/Documents/notes"
         org-agenda-files '("~/Documents/notes"))
   #+END_SRC

** set notes file and templates
   #+BEGIN_SRC emacs-lisp
   (setq org-default-notes-file (concat org-directory "/notes.org")
         org-capture-templates
         '(("t" "Todo" entry (file+headline (concat org-directory "/gtd.org") "Tasks")
            "* TODO %?\n %i\n %a")
           ("d" "Literate" entry (file+headline (concat org-directory "/literate.org") "Literate")
            "* %?\n %i\n %a")
           ("n" "Note" entry (file+headline (concat org-directory "/notes.org") "Notes")
            "* %?")
           ("j" "Journal" entry (file+datetree (concat org-directory "/journal.org"))
            "* %?" :clock-in t :clock-resume t)
           ("l" "Read it later" checkitem (file+headline (concat org-directory "/readlater.org") "Read it later")
            "[ ] %?")))
   #+END_SRC


* Theme
** solarized dark
   #+BEGIN_SRC emacs-lisp
   (use-package solarized-theme :ensure t
     :config
     (load-theme 'solarized-dark t))
   #+END_SRC


* Evil Mode
** evil
   #+BEGIN_SRC emacs-lisp
   (use-package evil :ensure t
     :init
     (setq evil-want-keybinding nil)  ; Required for evil-collection
     :config
     (evil-mode 1)
     ;; Set initial states for specific modes
     (evil-set-initial-state 'git-commit-mode 'insert))
   #+END_SRC

** evil-escape
   Quick escape from insert mode using key sequence
   #+BEGIN_SRC emacs-lisp
   (use-package evil-escape :ensure t
     :after evil
     :config
     (evil-escape-mode 1)
     (setq-default evil-escape-key-sequence "fj"))
   #+END_SRC

** evil-surround
   #+BEGIN_SRC emacs-lisp
   (use-package evil-surround :ensure t
     :after evil
     :config
     (global-evil-surround-mode 1))
   #+END_SRC

** evil-org
   Evil keybindings for org-mode
   #+BEGIN_SRC emacs-lisp
   (use-package evil-org :ensure t
     :after (evil org)
     :hook (org-mode . evil-org-mode)
     :config
     (require 'evil-org-agenda)
     (evil-org-agenda-set-keys))
   #+END_SRC


* Git / Magit
** magit
   #+BEGIN_SRC emacs-lisp
   (use-package magit :ensure t
     :commands magit-status)
   #+END_SRC


* Which-key
  Show available keybindings in a popup
  #+BEGIN_SRC emacs-lisp
  (use-package which-key :ensure t
    :config
    (which-key-mode)
    (setq which-key-idle-delay 0.3)           ; Show popup after 0.3 seconds
    (setq which-key-popup-type 'side-window)  ; Show in side window
    (setq which-key-side-window-location 'bottom)
    (setq which-key-sort-order 'which-key-key-order-alpha))
  #+END_SRC


* Ivy / Counsel / Swiper
  Completion and search framework
** ivy
   Generic completion mechanism with fuzzy matching
   #+BEGIN_SRC emacs-lisp
   (use-package ivy :ensure t
     :config
     (ivy-mode 1)
     (setq ivy-use-virtual-buffers t)          ; Add recent files and bookmarks to switch-buffer
     (setq ivy-wrap t)                         ; Wrap around when reaching end of list
     (setq ivy-count-format "(%d/%d) ")        ; Show current/total in prompt
     (setq ivy-initial-inputs-alist nil))      ; Don't start searches with ^
   #+END_SRC

** swiper
   Isearch replacement with overview
   #+BEGIN_SRC emacs-lisp
   (use-package swiper :ensure t
     :after ivy
     :bind (("C-s" . swiper)))                 ; Replace isearch with swiper
   #+END_SRC

** counsel
   Collection of Ivy-enhanced versions of common Emacs commands
   #+BEGIN_SRC emacs-lisp
   (use-package counsel :ensure t
     :after ivy
     :config
     (setq counsel-find-file-ignore-regexp "\\.DS_Store\\|.git")
     ;; Use macOS Spotlight for locate on macOS
     (when (eq system-type 'darwin)
       (setq counsel-locate-cmd 'counsel-locate-cmd-mdfind)))
   #+END_SRC


* Keybindings
   #+BEGIN_SRC emacs-lisp

;; Right option is ALT and left is META
;(setq mac-option-key-is-meta t)
;(setq mac-right-option-modifier nil)
;(global-set-key (kbd "M-:") 'insert-backs)

;; M is set to CMD (much easier)
(setq mac-option-modifier nil
mac-command-modifier 'meta
x-select-enable-clipboard t)
#+END_SRC

** general
   #+BEGIN_SRC emacs-lisp
   (use-package general :ensure t
     :config
     (general-define-key
      :states '(normal motion emacs)
      :keymaps 'override
      :prefix "SPC"
      :non-normal-prefix "C-SPC"

      ;; Special keys
      ""     '(nil :which-key "leader")
      "SPC"  '(counsel-M-x :which-key "M-x")

      ;; A - Applications
      "a"    '(:ignore t :which-key "Applications")
      "ad"   '(dired :which-key "Dired")
      "ac"   '(org-capture :which-key "Org capture")
      "aa"   '(org-agenda :which-key "Org agenda")

      ;; B - Buffer
      "b"    '(:ignore t :which-key "Buffer")
      "bb"   '(ivy-switch-buffer :which-key "Change buffer")
      "bd"   '(kill-buffer :which-key "Delete buffer")
      "bn"   '(next-buffer :which-key "Next buffer")
      "bp"   '(previous-buffer :which-key "Previous buffer")
      "bR"   '(revert-buffer :which-key "Revert buffer")
      "bk"   '(kill-buffer :which-key "Kill buffer")

      ;; E - Eval
      "e"    '(:ignore t :which-key "Eval")
      "eb"   '(eval-buffer :which-key "Eval Buffer")
      "ef"   '(eval-defun :which-key "Eval Defun")
      "er"   '(eval-region :which-key "Eval Region")
      "ee"   '(eval-expression :which-key "Eval Expression")
      "ec"   '(reload-config :which-key "Reload config")

      ;; F - File
      "f"    '(:ignore t :which-key "File")
      "fc"   '(open-config :which-key "Open settings.org file")
      "ff"   '(counsel-find-file :which-key "Find file")
      "fs"   '(save-buffer :which-key "Save")
      "fr"   '(counsel-recentf :which-key "Recent files")
      "fl"   '(counsel-locate :which-key "Locate file")

      ;; G - Git
      "g"    '(:ignore t :which-key "Git")
      "gg"   '(magit-status :which-key "Status")
      "gs"   '(magit-status :which-key "Status")
      "gc"   '(magit-commit :which-key "Commit")
      "gp"   '(magit-push :which-key "Push")
      "gP"   '(magit-pull :which-key "Pull")
      "gf"   '(magit-fetch :which-key "Fetch")
      "gb"   '(magit-branch :which-key "Branch")
      "gl"   '(magit-log :which-key "Log")
      "gd"   '(magit-diff :which-key "Diff")
      "gB"   '(magit-blame :which-key "Blame")

      ;; H - Help
      "h"    '(:ignore t :which-key "Help")
      "hi"   '(info :which-key "Info")
      "hdb"  '(counsel-descbinds :which-key "Describe bindings")
      "hdf"  '(counsel-describe-function :which-key "Describe function")
      "hdk"  '(describe-key :which-key "Describe key")
      "hdv"  '(counsel-describe-variable :which-key "Describe variable")
      "hdm"  '(describe-mode :which-key "Describe mode")

      ;; S - Search
      "s"    '(:ignore t :which-key "Search")
      "ss"   '(swiper :which-key "Search in buffer")
      "si"   '(counsel-imenu :which-key "Imenu")
      "sy"   '(counsel-yank-pop :which-key "Yank ring")

      ;; W - Window
      "w"    '(:ignore t :which-key "Window")
      "ww"   '(other-window :which-key "Switch window")
      "wd"   '(delete-window :which-key "Delete window")
      "wD"   '(delete-other-windows :which-key "Delete other windows")
      "ws"   '(split-window-below :which-key "Split window below")
      "w-"   '(split-window-below :which-key "Split window below")
      "wv"   '(split-window-right :which-key "Split window right")
      "w/"   '(split-window-right :which-key "Split window right")
      "wh"   '(windmove-left :which-key "Window left")
      "wj"   '(windmove-down :which-key "Window down")
      "wk"   '(windmove-up :which-key "Window up")
      "wl"   '(windmove-right :which-key "Window right")

      ;; X - Text
      "x"    '(:ignore t :which-key "Text")
      "xd"   '(delete-trailing-whitespace :which-key "Delete trailing whitespace")
      "xs"   '(sort-lines :which-key "Sort lines")
      "xu"   '(downcase-region :which-key "Lower case")
      "xU"   '(upcase-region :which-key "Upper case")
      "xc"   '(count-words :which-key "Count words")

      ;; Z - Zoom
      "z"    '(:ignore t :which-key "Zoom")
      "zi"   '(text-scale-increase :which-key "Text larger")
      "zu"   '(text-scale-decrease :which-key "Text smaller")))
   #+END_SRC

** evil mode keybindings
   Use swiper for search in normal mode
   #+BEGIN_SRC emacs-lisp
   (with-eval-after-load 'evil
     (general-define-key
      :states '(normal motion)
      "/" 'swiper))
   #+END_SRC

** org-mode keybindings
   #+BEGIN_SRC emacs-lisp
   (with-eval-after-load 'evil-org
     (general-define-key
      :states '(normal visual)
      :keymaps 'org-mode-map
      "gj" 'org-next-visible-heading
      "gk" 'org-previous-visible-heading))
   #+END_SRC
